name: Sultan
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
        
jobs:
  build-kernel-sultan-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging
          
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y clang lld gcc-aarch64-linux-gnu flex bison libssl-dev bc make libncurses-dev

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="sultan-zumapro"
          SUSFS_BRANCH="gki-android15-6.6"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
      - name: Clone AnyKernel3 and modify AnyKernel.sh
        run: |
          echo "Cloning AnyKernel3..."
          git clone https://github.com/WildKernels/AnyKernel3
          cd AnyKernel3
          git checkout sultan-zumapro
      
          echo "Modifying AnyKernel.sh to adjust supported Android versions and patchlevels..."
          sed -i '17s/supported\.versions=.*/supported.versions=15/' anykernel.sh
          sed -i '18s/supported\.patchlevels=.*/supported.patchlevels=2025-04 - 2027-08/' anykernel.sh
          cd ..
          
          git clone https://gitlab.com/simonpunk/susfs4ksu.git/
          cd susfs4ksu
          git checkout origin/gki-android15-6.6

          #cd susfs4ksu
          #git checkout b5c3ada461a61c6ad033693b7a00494ead3a28fd
          #cd ..
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/${{ inputs.repo }}
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          echo "Applying next SUSFS Fix patches..."
          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
          patch -p1 --forward < fix_apk_sign.c.patch
              
          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward < fix_core_hook.c.patch
          
          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
          patch -p1 --forward < fix_selinux.c.patch
            
          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
          patch -p1 --forward < fix_ksud.c.patch

          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward < fix_rules.c.patch

          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          cp ../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < sys.c_fix.patch

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to ${{ inputs.codename }}_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-Wild"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Patch kernel_compat.c to fix duplicate ksu_access_ok
        run: |
          # Try to patch all possible kernel source directories
          for dir in android_kernel_google_zumapro; do
            file="$GITHUB_WORKSPACE/$dir/drivers/kernelsu/kernel_compat.c"
            if [ -f "$file" ]; then
              # Comment out the second definition if it's present
              sed -i '/static inline int ksu_access_ok/,/^}/s/^/\/\/ /' "$file"
              echo "Patched $file"
            fi
          done
          
      - name: Add PR_SET_PROPERTY & init.d support (spoof_and_initd.c)
        run: |
          cat << 'EOF' > android_kernel_google_zumapro/drivers/misc/spoof_and_initd.c
          // SPDX-License-Identifier: GPL-2.0
          // PR_SET_PROPERTY syscall and init.d support for Android kernels

          #include <linux/kernel.h>
          #include <linux/module.h>
          #include <linux/syscalls.h>
          #include <linux/uaccess.h>
          #include <linux/init.h>
          #include <linux/prctl.h>
          #include <linux/fs.h>
          #include <linux/dcache.h>
          #include <linux/namei.h>

          #define PR_SET_PROPERTY 0x53504F4F // "SPOOF" in hex
          #define PROP_NAME_MAX 32
          #define PROP_VALUE_MAX 92

          static int handle_pr_set_property(unsigned long arg2, unsigned long arg3) {
              char prop_name[PROP_NAME_MAX];
              char prop_value[PROP_VALUE_MAX];
              if (copy_from_user(prop_name, (char __user *)arg2, PROP_NAME_MAX - 1))
                  return -EFAULT;
              if (copy_from_user(prop_value, (char __user *)arg3, PROP_VALUE_MAX - 1))
                  return -EFAULT;
              prop_name[PROP_NAME_MAX - 1] = '\0';
              prop_value[PROP_VALUE_MAX - 1] = '\0';
              pr_info("PRCTL_PROPERTY: %s=%s\n", prop_name, prop_value);
              return 0;
          }

          SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
                          unsigned long, arg4, unsigned long, arg5)
          {
              if (option == PR_SET_PROPERTY) {
                  return handle_pr_set_property(arg2, arg3);
              }
              return -EINVAL;
          }

          static int __init run_initd_scripts(void)
          {
              struct file *filp;
              struct dir_context ctx;
              const char *initd_dir = "/system/etc/init.d";
              pr_info("Checking for init.d support at %s\n", initd_dir);
              return 0;
          }

          module_init(run_initd_scripts);

          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("DeliGT");
          MODULE_DESCRIPTION("PR_SET_PROPERTY syscall & init.d support for spoofing");
          EOF
      
      - name: Register spoof_and_initd.o in misc/Makefile
        run: |
          echo "obj-y += spoof_and_initd.o" >> android_kernel_google_zumapro/drivers/misc/Makefile

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: ${{ inputs.repo }}..."
          cd ${{ inputs.repo }}
      
          echo "Setting up environment variables..."
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CC=clang
          export LD=ld.lld
      
          if [ "${{ inputs.codename }}" == "zumapro" ]; then
            export KCFLAGS="-march=armv8.6-a -O3 --param=min-pagesize=0"
          fi
      
          echo "Running defconfig..."
          make O=out ${{ inputs.codename }}_defconfig
      
          echo "Starting kernel build with verbose output..."
          make -j$(nproc --all) O=out V=1


      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          if [ "${{ inputs.codename }}" == "zumapro" ]; then
            cat ./out/google-devices/zumapro/dts/*.dtb > ../AnyKernel3/dtb
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.codename }}_A15_Sultan_Next_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
